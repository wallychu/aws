AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  License: Apache-2.0
Description: 'AWS Cloudformation Template for Development Server using Free Tier options, ELB, Web Group, RDS Mysql with Read Replica'
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
  LIGPLDT:
    Description: IP For PLDT Connection
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 210.213.210.24/32
  LIGRISE:
    Description: IP For RISE Connection
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 58.69.126.107/32
  S3BuildBucket:
    Description: Bucket use to store Required files to deploy this template
    Type: String
    MinLength: 1
    MaxLength: 50
    Default: anap-build-files
  SiteURL:
    Description: Doman name for the API/Site
    Type: String
    MinLength: 1
    MaxLength: 200
  # S3IAMRole:
  #   Description: Role Required for Bucket access
  #   Type: String
  #   MinLength: 1
  #   MaxLength: 200
  #   Default: arn:aws:iam::127779008458:role/CloudWatchAgentServerRole
  EC2IAMRegion:
    Description: Default Region for the EC2 IAM user
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: ap-northeast-1
  EC2IAMAccess:
    Description: EC2 User Access key
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: AKIAR3QBY57FCCLENYUL
  EC2IAMSecret:
    Description: EC2 User Secret access key
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: 9XQDPGg2POumbaA8Up9OxRvYiPSwlbVwAIlCJkK4
  ProjectDeploymentBranch:
    Description: Repository branch that will be used to checkout the project files
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: develop
  NginxConfFilename:
    Description: Filename for the nginx conf for the project located on s3
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: anap.conf
  ProjectRepository:
    Description: Repository URL of the project
    Type: String
    Default: 'git@bitbucket.org:lig-admin/anap.git' 
  DBName:
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  DBStorageType:
    Description: The database storage type
    Type: String
    Default: standard
    AllowedValues: [standard, gp2]
    ConstraintDescription: must select a valid database instance type.
  DBRetentionPeriod:
    Description: The database retention period
    Type: String
    Default: 30
    AllowedValues: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
      21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]
    ConstraintDescription: must select a valid database instance type.
  DBInstanceName:
    Description: The RDS instance name
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  ###### Optional Parameters. Comment out if not needed
  SupervisorConfFilename:
    Description: Filename for the supervisor conf for the project located on s3
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: anap-laravel.conf
  S3UploadAccess:
    Description: Credential to upload product images to S3
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: AKIAR3QBY57FF4AAOAVF
  S3UploadSecret:
    Description: Credential to upload product images to S3
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: tRTJT8ZYdZ7eXHp9yghIVSz/7VnJiKIrLOjOhsEx
  S3UploadRegion:
    Description: Region for the S3 bucket location for product images
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: ap-northeast-1
  PushNotificationARN:
    Description: ARN for using push notification
    Type: String
    MinLength: 1
    MaxLength: 200
    Default: arn:aws:sns:ap-northeast-1:127779008458:app/GCM/LinkAnapAndroidPushNoti
Resources:
  EC2ToDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref 'OperatorEMail'
        Protocol: email
  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: '1'
      MaxSize: '3'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
      NotificationConfigurations:
        - TopicARN: !Ref 'NotificationTopic'
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref 'DBName'
      AllocatedStorage: '20'
      DBInstanceClass: !Ref 'DBInstanceClass'
      Engine: MySQL
      EngineVersion: 8.0.15
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      DBInstanceIdentifier: !Ref 'DBInstanceName'
      StorageType: !Ref 'DBStorageType'
      BackupRetentionPeriod: !Ref 'DBRetentionPeriod'
      VPCSecurityGroups: [!GetAtt [EC2ToDBSecurityGroup, GroupId]]
    DeletionPolicy: Snapshot
  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref 'DatabaseInstance'
      DBInstanceClass: !Ref 'DBInstanceClass'
      DBInstanceIdentifier: !Join ['', [!Ref 'DBInstanceName', 'Replica']]
      StorageType: !Ref 'DBStorageType'
      Tags:
      - Key: Name
        Value: Read Replica Database
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref 'WebServerGroup'
      Cooldown: '60'
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [!Ref 'WebServerScaleUpPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebServerGroup'
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [!Ref 'WebServerScaleDownPolicy']
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref 'WebServerGroup'
      ComparisonOperator: LessThanThreshold
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: !GetAZs ''
      CrossZone: true
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  # ElasticLoadBalancerHttpRedirectListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   DependsOn:
  #     - ElasticLoadBalancer
  #   Properties:
  #     DefaultActions:
  #       - RedirectConfig:
  #           Host: "#{host}"
  #           Path: "/#{path}"
  #           Port: 443
  #           Protocol: "HTTPS"
  #           Query: "#{query}"
  #           StatusCode: HTTP_301
  #         Type: redirect
  #     LoadBalancerArn: !Ref 'ElasticLoadBalancer'
  #     Port: 80
  #     Protocol: HTTP
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a "Link" Instance
      AWS::CloudFormation::Init:
        configSets:
          setup:
            - "configure_cfn"
        configure_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --configsets setup --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon
                
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                
                [Install]
                WantedBy=multi-user.target
              mode: "000400"
              owner: root
              group: root
          commands:
            01_enable_cfn-hup:
              command: "systemctl enable cfn-hup.service"
            02_start_cfn-hup:
              command: "systemctl start cfn-hup.service"
    Properties:
      KeyName: !Ref 'KeyName'
      ImageId: ami-0eb48a19a8d81e20b
      SecurityGroups: [!Ref 'RISESecurityGroup', !Ref 'PLDTSecurityGroup', !Ref 'HTTPSecurityGroup']
      InstanceType: !Ref 'InstanceType'
      UserData: !Base64
        Fn::Join:
        - ""
        - ["#!/bin/bash -xe\n", 
          ### Update packages and install AWS cfn bootstrap
          "apt-get update\n", 
          "apt-get -y upgrade\n", 
          "apt-get -y install python-pip\n", 
          "apt-get install -y python-setuptools\n",
          "mkdir -p /opt/aws/bin\n",
          "python /usr/lib/python2.7/dist-packages/easy_install.py --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
          ### Setup AWS CLI and download ssh keys required to clone repository
          "apt install -y awscli \n",
          "mkdir ~/.aws\n",
          "touch ~/.aws/config\n",
          'echo "[default]" >> ~/.aws/config',"\n",
          'echo "region = ',!Ref 'EC2IAMRegion', '" >> ~/.aws/config',"\n",
          "touch ~/.aws/credentials\n",
          'echo "[default]" >> ~/.aws/credentials',"\n",
          'echo "aws_access_key_id = ',!Ref 'EC2IAMAccess', '" >> ~/.aws/credentials',"\n",
          'echo "aws_secret_access_key = ',!Ref 'EC2IAMSecret', '" >> ~/.aws/credentials',"\n",
          "aws s3 cp s3://", !Ref 'S3BuildBucket', "/id_rsa ~/.ssh/ \n",
          "chmod 600 ~/.ssh/id_rsa \n",
          "aws s3 cp s3://", !Ref 'S3BuildBucket', "/id_rsa.pub ~/.ssh/ \n",
          ### Install needed programs such as php, nginx
          "apt-get install -y software-properties-common\n",
          "add-apt-repository -y ppa:ondrej/php\n",
          "add-apt-repository -y ppa:ondrej/nginx\n",
          "apt-get update\n",
          "apt-get -y install php7.2 php7.2-mysql php7.2-fpm php7.2-xml php7.2-gd php7.2-opcache php7.2-mbstring php7.2-curl\n",
          "apt -y install zip unzip php7.2-zip \n",
          "cd ~/ \n",
          'export COMPOSER_HOME="/root";', "\n",
          "curl -sS https://getcomposer.org/installer | php -dopen_basedir=none \n",
          "ls -la \n",
          "sudo cp ~/composer.phar /usr/local/bin/composer \n",
          "apt-get install -y git\n",
          "apt-get install -y nginx\n",
          # Download repository
          "cd /var/www\n",
          # https://serverfault.com/questions/447028/non-interactive-git-clone-ssh-fingerprint-prompt
          # if the RSA fingerprint is different, update the code below
          # this is the only secure way of automating repository cloning
          "touch ~/.ssh/known_hosts \n",
          'echo "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw=="  >> ~/.ssh/known_hosts',"\n",
          "git clone ", !Ref 'ProjectRepository', " \n",
          "cd anap/api \n",
          "git checkout ", !Ref 'ProjectDeploymentBranch', " \n",
          # install vendor files for project
          "composer install --prefer-dist \n",
          # Set the proper permission for the folder
          "cd /var/www \n",
          "chown -R www-data:www-data anap/ \n",
          "chmod -R 775 anap/ \n",
          # rename the .env file
          "cd anap/api \n",
          "mv .env .env_old \n",
          # Setup env for project (laravel) (Please update this before deploying the template. Laravel might have added new env variables or you project might)
          # have custom env variables
          "touch .env\n",
          'echo "APP_NAME=Laravel" >> .env', "\n",
          'echo "APP_ENV=local" >> .env', "\n",
          'echo "APP_KEY=base64:xdpiq2AUjAmVOHBF2X8TolErXl0n2XkncgJn0pSSRCY=" >> .env', "\n",
          'echo "APP_DEBUG=true" >> .env', "\n",
          'echo "APP_URL=', !Ref 'SiteURL', '" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "LOG_CHANNEL=stack" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "DB_CONNECTION=mysql" >> .env', "\n", 
          'echo "DB_HOST=', !GetAtt [DatabaseInstance, Endpoint.Address],'" >> .env ',"\n",
          ## uncomment if you don't need read replica
          # 'echo "DB_READ_HOST=', !GetAtt [DatabaseInstance, Endpoint.Address], '" >> .env ',"\n",
          ## comment ouf next line if you don't need read replica 
          'echo "DB_READ_HOST=', !GetAtt [ReplicaDB, Endpoint.Address], '" >> .env ',"\n",
          'echo "DB_WRITE_HOST=', !GetAtt [DatabaseInstance, Endpoint.Address], '" >> .env ',"\n",
          'echo "DB_PORT=3306" >> .env', "\n",
          'echo "DB_DATABASE=', !Ref 'DBName', '" >> .env', "\n",
          'echo "DB_USERNAME=', !Ref 'DBUser', '" >> .env', "\n",
          'echo "DB_PASSWORD=', !Ref 'DBPassword', '" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "BROADCAST_DRIVER=log" >> .env', "\n",
          'echo "CACHE_DRIVER=file" >> .env', "\n",
          'echo "QUEUE_CONNECTION=database" >> .env', "\n",
          'echo "SESSION_DRIVER=file" >> .env', "\n",
          'echo "SESSION_LIFETIME=120" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "REDIS_HOST=127.0.0.1" >> .env', "\n",
          'echo "REDIS_PASSWORD=null" >> .env', "\n",
          'echo "REDIS_PORT=6379" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "MAIL_DRIVER=smtp" >> .env', "\n",
          'echo "MAIL_HOST=smtp.mailtrap.io" >> .env', "\n",
          'echo "MAIL_PORT=2525" >> .env', "\n",
          'echo "MAIL_USERNAME=null" >> .env', "\n",
          'echo "MAIL_PASSWORD=null" >> .env', "\n",
          'echo "MAIL_ENCRYPTION=null" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "AWS_ACCESS_KEY_ID=', !Ref 'S3UploadAccess', '" >> .env', "\n",
          'echo "AWS_SECRET_ACCESS_KEY=', !Ref 'S3UploadSecret', '" >> .env', "\n",
          'echo "AWS_DEFAULT_REGION=', !Ref 'S3UploadRegion', '" >> .env', "\n",
          'echo "AWS_BUCKET=" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "PUSHER_APP_ID=" >> .env', "\n",
          'echo "PUSHER_APP_KEY=" >> .env', "\n",
          'echo "PUSHER_APP_SECRET=" >> .env', "\n",
          'echo "PUSHER_APP_CLUSTER=mt1" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "MIX_PUSHER_APP_KEY=\"${PUSHER_APP_KEY}\"" >> .env', "\n",
          'echo "MIX_PUSHER_APP_CLUSTER=\"${PUSHER_APP_CLUSTER}\"" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "ANDROID_APPLICATION_ARN=', !Ref 'PushNotificationARN', '" >> .env', "\n",
          'echo "" >> .env ', "\n",
          'echo "S3_GAUSS_IMAGE_BUCKET=anap-gauss-bucket" >> .env', "\n",
          ### Setup Nginx conf
          # Download Nginx Conf file from s3
          "aws s3 cp s3://", !Ref 'S3BuildBucket', "/", !Ref 'NginxConfFilename', " /etc/nginx/sites-available/ \n",
          # set proper permissions
          "chmod 644 /etc/nginx/sites-available/", !Ref 'NginxConfFilename', " \n",
          # Create symlink for conf file
          "ln -s /etc/nginx/sites-available/", !Ref 'NginxConfFilename', " /etc/nginx/sites-enabled/", !Ref 'NginxConfFilename'," \n",
          # restart nginx
          "service nginx restart \n",
          ###### Optional Settings Depending on the project. Comment out if not needed
          ### Setup supervisor
          "apt-get install -y supervisor \n",
          "cd /etc/supervisor/conf.d \n",
          # Download supervisor Conf file from s3
          "aws s3 cp s3://", !Ref 'S3BuildBucket', "/", !Ref 'SupervisorConfFilename', " /etc/supervisor/conf.d/ \n",
          # set proper permissions
          "chmod 644 /etc/supervisor/conf.d/", !Ref 'SupervisorConfFilename', " \n",
          "sudo supervisorctl reread \n",
          "sudo supervisorctl restart all \n",
          ### Add ingress 
          "IP=$(curl curl http://169.254.169.254/latest/meta-data/local-ipv4)\n",
          "aws ec2 authorize-security-group-ingress --group-name ",!Ref 'EC2ToDBSecurityGroup', " --protocol tcp --port 3306 --cidr ","$IP","/24 \n",
          ### Cleanup AWS credentials
          "rm -rf ~/.aws \n",
          ### Add role to avoid log issues
          "sudo usermod -aG www-data ubuntu \n",
          ### Fix a bug on pythong not running properly
          "export LC_CTYPE=en_US.UTF-8 \n",
          ### run configset
          "/opt/aws/bin/cfn-init -v ", "         --stack ", !Ref 'AWS::StackName',
          "         --resource LaunchConfig ", "  --configsets setup", "         --region ", !Ref 'AWS::Region',"\n",
          "/opt/aws/bin/cfn-signal -e $? ", "         --stack ", !Ref 'AWS::StackName',
          "         --resource WebServerGroup ", "         --region ", !Ref 'AWS::Region',"\n",
          ]
  PLDTSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'LIGPLDT'
  RISESecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref 'LIGRISE'
  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for HTTP & HTTPS rules
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupOwnerId: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.OwnerAlias]
        SourceSecurityGroupName: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.GroupName]
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupOwnerId: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.OwnerAlias]
        SourceSecurityGroupName: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.GroupName]
Outputs:
  URL:
    Description: The URL of the website
    Value: !Join ['', ['http://', !GetAtt [ElasticLoadBalancer, DNSName]]]